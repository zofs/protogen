// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: accore/v1/oauth_client_service.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	pb "github.com/zofs/protogen/accore/pb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OAuthClientService_GoogleOauth_FullMethodName          = "/accore.v1.OAuthClientService/GoogleOauth"
	OAuthClientService_GoogleOauthAuthorize_FullMethodName = "/accore.v1.OAuthClientService/GoogleOauthAuthorize"
)

// OAuthClientServiceClient is the client API for OAuthClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OAuthClientServiceClient interface {
	GoogleOauth(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	GoogleOauthAuthorize(ctx context.Context, in *pb.OauthCode, opts ...grpc.CallOption) (*pb.LoginInfo, error)
}

type oAuthClientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOAuthClientServiceClient(cc grpc.ClientConnInterface) OAuthClientServiceClient {
	return &oAuthClientServiceClient{cc}
}

func (c *oAuthClientServiceClient) GoogleOauth(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, OAuthClientService_GoogleOauth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthClientServiceClient) GoogleOauthAuthorize(ctx context.Context, in *pb.OauthCode, opts ...grpc.CallOption) (*pb.LoginInfo, error) {
	out := new(pb.LoginInfo)
	err := c.cc.Invoke(ctx, OAuthClientService_GoogleOauthAuthorize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OAuthClientServiceServer is the server API for OAuthClientService service.
// All implementations must embed UnimplementedOAuthClientServiceServer
// for forward compatibility
type OAuthClientServiceServer interface {
	GoogleOauth(context.Context, *empty.Empty) (*empty.Empty, error)
	GoogleOauthAuthorize(context.Context, *pb.OauthCode) (*pb.LoginInfo, error)
	mustEmbedUnimplementedOAuthClientServiceServer()
}

// UnimplementedOAuthClientServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOAuthClientServiceServer struct {
}

func (UnimplementedOAuthClientServiceServer) GoogleOauth(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoogleOauth not implemented")
}
func (UnimplementedOAuthClientServiceServer) GoogleOauthAuthorize(context.Context, *pb.OauthCode) (*pb.LoginInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoogleOauthAuthorize not implemented")
}
func (UnimplementedOAuthClientServiceServer) mustEmbedUnimplementedOAuthClientServiceServer() {}

// UnsafeOAuthClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OAuthClientServiceServer will
// result in compilation errors.
type UnsafeOAuthClientServiceServer interface {
	mustEmbedUnimplementedOAuthClientServiceServer()
}

func RegisterOAuthClientServiceServer(s grpc.ServiceRegistrar, srv OAuthClientServiceServer) {
	s.RegisterService(&OAuthClientService_ServiceDesc, srv)
}

func _OAuthClientService_GoogleOauth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthClientServiceServer).GoogleOauth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuthClientService_GoogleOauth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthClientServiceServer).GoogleOauth(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthClientService_GoogleOauthAuthorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.OauthCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthClientServiceServer).GoogleOauthAuthorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuthClientService_GoogleOauthAuthorize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthClientServiceServer).GoogleOauthAuthorize(ctx, req.(*pb.OauthCode))
	}
	return interceptor(ctx, in, info, handler)
}

// OAuthClientService_ServiceDesc is the grpc.ServiceDesc for OAuthClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OAuthClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accore.v1.OAuthClientService",
	HandlerType: (*OAuthClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GoogleOauth",
			Handler:    _OAuthClientService_GoogleOauth_Handler,
		},
		{
			MethodName: "GoogleOauthAuthorize",
			Handler:    _OAuthClientService_GoogleOauthAuthorize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accore/v1/oauth_client_service.proto",
}
