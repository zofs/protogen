// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: accore/v1/phone-service.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	pb "github.com/zofs/protogen/accore/pb"
	dtopb "github.com/zofs/protogen/dtopb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PhoneService_List_FullMethodName       = "/accore.v1.PhoneService/List"
	PhoneService_Add_FullMethodName        = "/accore.v1.PhoneService/Add"
	PhoneService_Delete_FullMethodName     = "/accore.v1.PhoneService/Delete"
	PhoneService_SetPrimary_FullMethodName = "/accore.v1.PhoneService/SetPrimary"
	PhoneService_GetPrimary_FullMethodName = "/accore.v1.PhoneService/GetPrimary"
)

// PhoneServiceClient is the client API for PhoneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PhoneServiceClient interface {
	List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*pb.Phones, error)
	Add(ctx context.Context, in *dtopb.String, opts ...grpc.CallOption) (*pb.Phone, error)
	Delete(ctx context.Context, in *dtopb.ID, opts ...grpc.CallOption) (*empty.Empty, error)
	SetPrimary(ctx context.Context, in *dtopb.ID, opts ...grpc.CallOption) (*pb.Phone, error)
	GetPrimary(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*pb.Phone, error)
}

type phoneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPhoneServiceClient(cc grpc.ClientConnInterface) PhoneServiceClient {
	return &phoneServiceClient{cc}
}

func (c *phoneServiceClient) List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*pb.Phones, error) {
	out := new(pb.Phones)
	err := c.cc.Invoke(ctx, PhoneService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phoneServiceClient) Add(ctx context.Context, in *dtopb.String, opts ...grpc.CallOption) (*pb.Phone, error) {
	out := new(pb.Phone)
	err := c.cc.Invoke(ctx, PhoneService_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phoneServiceClient) Delete(ctx context.Context, in *dtopb.ID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, PhoneService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phoneServiceClient) SetPrimary(ctx context.Context, in *dtopb.ID, opts ...grpc.CallOption) (*pb.Phone, error) {
	out := new(pb.Phone)
	err := c.cc.Invoke(ctx, PhoneService_SetPrimary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phoneServiceClient) GetPrimary(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*pb.Phone, error) {
	out := new(pb.Phone)
	err := c.cc.Invoke(ctx, PhoneService_GetPrimary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhoneServiceServer is the server API for PhoneService service.
// All implementations must embed UnimplementedPhoneServiceServer
// for forward compatibility
type PhoneServiceServer interface {
	List(context.Context, *empty.Empty) (*pb.Phones, error)
	Add(context.Context, *dtopb.String) (*pb.Phone, error)
	Delete(context.Context, *dtopb.ID) (*empty.Empty, error)
	SetPrimary(context.Context, *dtopb.ID) (*pb.Phone, error)
	GetPrimary(context.Context, *empty.Empty) (*pb.Phone, error)
	mustEmbedUnimplementedPhoneServiceServer()
}

// UnimplementedPhoneServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPhoneServiceServer struct {
}

func (UnimplementedPhoneServiceServer) List(context.Context, *empty.Empty) (*pb.Phones, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPhoneServiceServer) Add(context.Context, *dtopb.String) (*pb.Phone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedPhoneServiceServer) Delete(context.Context, *dtopb.ID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPhoneServiceServer) SetPrimary(context.Context, *dtopb.ID) (*pb.Phone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPrimary not implemented")
}
func (UnimplementedPhoneServiceServer) GetPrimary(context.Context, *empty.Empty) (*pb.Phone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrimary not implemented")
}
func (UnimplementedPhoneServiceServer) mustEmbedUnimplementedPhoneServiceServer() {}

// UnsafePhoneServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PhoneServiceServer will
// result in compilation errors.
type UnsafePhoneServiceServer interface {
	mustEmbedUnimplementedPhoneServiceServer()
}

func RegisterPhoneServiceServer(s grpc.ServiceRegistrar, srv PhoneServiceServer) {
	s.RegisterService(&PhoneService_ServiceDesc, srv)
}

func _PhoneService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhoneService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneServiceServer).List(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhoneService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dtopb.String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhoneService_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneServiceServer).Add(ctx, req.(*dtopb.String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhoneService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dtopb.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhoneService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneServiceServer).Delete(ctx, req.(*dtopb.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhoneService_SetPrimary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dtopb.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneServiceServer).SetPrimary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhoneService_SetPrimary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneServiceServer).SetPrimary(ctx, req.(*dtopb.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhoneService_GetPrimary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneServiceServer).GetPrimary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhoneService_GetPrimary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneServiceServer).GetPrimary(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// PhoneService_ServiceDesc is the grpc.ServiceDesc for PhoneService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PhoneService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accore.v1.PhoneService",
	HandlerType: (*PhoneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _PhoneService_List_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _PhoneService_Add_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PhoneService_Delete_Handler,
		},
		{
			MethodName: "SetPrimary",
			Handler:    _PhoneService_SetPrimary_Handler,
		},
		{
			MethodName: "GetPrimary",
			Handler:    _PhoneService_GetPrimary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accore/v1/phone-service.proto",
}
