// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: catalog/v1/showcase_service.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShowcaseService_Create_FullMethodName = "/catalog.v1.pb.ShowcaseService/Create"
	ShowcaseService_Update_FullMethodName = "/catalog.v1.pb.ShowcaseService/Update"
	ShowcaseService_List_FullMethodName   = "/catalog.v1.pb.ShowcaseService/List"
	ShowcaseService_Delete_FullMethodName = "/catalog.v1.pb.ShowcaseService/Delete"
)

// ShowcaseServiceClient is the client API for ShowcaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShowcaseServiceClient interface {
	Create(ctx context.Context, in *ShowcaseCreate, opts ...grpc.CallOption) (*Showcase, error)
	Update(ctx context.Context, in *ShowcaseUpdate, opts ...grpc.CallOption) (*Showcase, error)
	List(ctx context.Context, in *ListShowcase, opts ...grpc.CallOption) (*ListShowcase, error)
	Delete(ctx context.Context, in *ShowcaseDelete, opts ...grpc.CallOption) (*empty.Empty, error)
}

type showcaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShowcaseServiceClient(cc grpc.ClientConnInterface) ShowcaseServiceClient {
	return &showcaseServiceClient{cc}
}

func (c *showcaseServiceClient) Create(ctx context.Context, in *ShowcaseCreate, opts ...grpc.CallOption) (*Showcase, error) {
	out := new(Showcase)
	err := c.cc.Invoke(ctx, ShowcaseService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showcaseServiceClient) Update(ctx context.Context, in *ShowcaseUpdate, opts ...grpc.CallOption) (*Showcase, error) {
	out := new(Showcase)
	err := c.cc.Invoke(ctx, ShowcaseService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showcaseServiceClient) List(ctx context.Context, in *ListShowcase, opts ...grpc.CallOption) (*ListShowcase, error) {
	out := new(ListShowcase)
	err := c.cc.Invoke(ctx, ShowcaseService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showcaseServiceClient) Delete(ctx context.Context, in *ShowcaseDelete, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ShowcaseService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShowcaseServiceServer is the server API for ShowcaseService service.
// All implementations must embed UnimplementedShowcaseServiceServer
// for forward compatibility
type ShowcaseServiceServer interface {
	Create(context.Context, *ShowcaseCreate) (*Showcase, error)
	Update(context.Context, *ShowcaseUpdate) (*Showcase, error)
	List(context.Context, *ListShowcase) (*ListShowcase, error)
	Delete(context.Context, *ShowcaseDelete) (*empty.Empty, error)
	mustEmbedUnimplementedShowcaseServiceServer()
}

// UnimplementedShowcaseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShowcaseServiceServer struct {
}

func (UnimplementedShowcaseServiceServer) Create(context.Context, *ShowcaseCreate) (*Showcase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedShowcaseServiceServer) Update(context.Context, *ShowcaseUpdate) (*Showcase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedShowcaseServiceServer) List(context.Context, *ListShowcase) (*ListShowcase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedShowcaseServiceServer) Delete(context.Context, *ShowcaseDelete) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedShowcaseServiceServer) mustEmbedUnimplementedShowcaseServiceServer() {}

// UnsafeShowcaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShowcaseServiceServer will
// result in compilation errors.
type UnsafeShowcaseServiceServer interface {
	mustEmbedUnimplementedShowcaseServiceServer()
}

func RegisterShowcaseServiceServer(s grpc.ServiceRegistrar, srv ShowcaseServiceServer) {
	s.RegisterService(&ShowcaseService_ServiceDesc, srv)
}

func _ShowcaseService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowcaseCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowcaseServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowcaseService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowcaseServiceServer).Create(ctx, req.(*ShowcaseCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowcaseService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowcaseUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowcaseServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowcaseService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowcaseServiceServer).Update(ctx, req.(*ShowcaseUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowcaseService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShowcase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowcaseServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowcaseService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowcaseServiceServer).List(ctx, req.(*ListShowcase))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowcaseService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowcaseDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowcaseServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowcaseService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowcaseServiceServer).Delete(ctx, req.(*ShowcaseDelete))
	}
	return interceptor(ctx, in, info, handler)
}

// ShowcaseService_ServiceDesc is the grpc.ServiceDesc for ShowcaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShowcaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "catalog.v1.pb.ShowcaseService",
	HandlerType: (*ShowcaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ShowcaseService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ShowcaseService_Update_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ShowcaseService_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ShowcaseService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "catalog/v1/showcase_service.proto",
}
