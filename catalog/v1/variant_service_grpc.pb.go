// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: catalog/v1/variant_service.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	dtopb "github.com/zofs/protogen/dtopb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VariantService_Create_FullMethodName = "/catalog.v1.pb.VariantService/Create"
	VariantService_Update_FullMethodName = "/catalog.v1.pb.VariantService/Update"
	VariantService_Get_FullMethodName    = "/catalog.v1.pb.VariantService/Get"
	VariantService_Delete_FullMethodName = "/catalog.v1.pb.VariantService/Delete"
)

// VariantServiceClient is the client API for VariantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VariantServiceClient interface {
	Create(ctx context.Context, in *VariantCreate, opts ...grpc.CallOption) (*Variant, error)
	Update(ctx context.Context, in *VariantUpdate, opts ...grpc.CallOption) (*Variant, error)
	Get(ctx context.Context, in *dtopb.IDString, opts ...grpc.CallOption) (*Variant, error)
	Delete(ctx context.Context, in *dtopb.IDString, opts ...grpc.CallOption) (*empty.Empty, error)
}

type variantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVariantServiceClient(cc grpc.ClientConnInterface) VariantServiceClient {
	return &variantServiceClient{cc}
}

func (c *variantServiceClient) Create(ctx context.Context, in *VariantCreate, opts ...grpc.CallOption) (*Variant, error) {
	out := new(Variant)
	err := c.cc.Invoke(ctx, VariantService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *variantServiceClient) Update(ctx context.Context, in *VariantUpdate, opts ...grpc.CallOption) (*Variant, error) {
	out := new(Variant)
	err := c.cc.Invoke(ctx, VariantService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *variantServiceClient) Get(ctx context.Context, in *dtopb.IDString, opts ...grpc.CallOption) (*Variant, error) {
	out := new(Variant)
	err := c.cc.Invoke(ctx, VariantService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *variantServiceClient) Delete(ctx context.Context, in *dtopb.IDString, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, VariantService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VariantServiceServer is the server API for VariantService service.
// All implementations must embed UnimplementedVariantServiceServer
// for forward compatibility
type VariantServiceServer interface {
	Create(context.Context, *VariantCreate) (*Variant, error)
	Update(context.Context, *VariantUpdate) (*Variant, error)
	Get(context.Context, *dtopb.IDString) (*Variant, error)
	Delete(context.Context, *dtopb.IDString) (*empty.Empty, error)
	mustEmbedUnimplementedVariantServiceServer()
}

// UnimplementedVariantServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVariantServiceServer struct {
}

func (UnimplementedVariantServiceServer) Create(context.Context, *VariantCreate) (*Variant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedVariantServiceServer) Update(context.Context, *VariantUpdate) (*Variant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedVariantServiceServer) Get(context.Context, *dtopb.IDString) (*Variant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedVariantServiceServer) Delete(context.Context, *dtopb.IDString) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedVariantServiceServer) mustEmbedUnimplementedVariantServiceServer() {}

// UnsafeVariantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VariantServiceServer will
// result in compilation errors.
type UnsafeVariantServiceServer interface {
	mustEmbedUnimplementedVariantServiceServer()
}

func RegisterVariantServiceServer(s grpc.ServiceRegistrar, srv VariantServiceServer) {
	s.RegisterService(&VariantService_ServiceDesc, srv)
}

func _VariantService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VariantCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariantServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VariantService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariantServiceServer).Create(ctx, req.(*VariantCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _VariantService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VariantUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariantServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VariantService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariantServiceServer).Update(ctx, req.(*VariantUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _VariantService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dtopb.IDString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariantServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VariantService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariantServiceServer).Get(ctx, req.(*dtopb.IDString))
	}
	return interceptor(ctx, in, info, handler)
}

func _VariantService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dtopb.IDString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariantServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VariantService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariantServiceServer).Delete(ctx, req.(*dtopb.IDString))
	}
	return interceptor(ctx, in, info, handler)
}

// VariantService_ServiceDesc is the grpc.ServiceDesc for VariantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VariantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "catalog.v1.pb.VariantService",
	HandlerType: (*VariantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _VariantService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _VariantService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _VariantService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _VariantService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "catalog/v1/variant_service.proto",
}
